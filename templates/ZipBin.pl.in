#! /usr/bin/perl
##################################################################
#  $Id: ZipBin.pl.in,v 1.9 2019/09/06 19:32:11 saroun Exp $
#  *****  Script for packing SIMRES  binary distribution *****
#  Usage: perl ZipBin.pl
##################################################################
BEGIN {
	push @INC, '.';
}
use Restrax;
use strict;
use Cwd;
use vars qw/*dbg *SYSNAME *HOST *PROMPT/;
*dbg      = *Restrax::dbg;
*SYSNAME  = *Restrax::SYSNAME;
*HOST     = *Restrax::HOST;
*PROMPT   = *Restrax::PROMPT;

# -------------------  PROJECT DEFINITIONS (edit to your convenience)------------

# Executable files to be packed in addition to those installed
my @EXECS=("Install.pl","Restrax.pm");
	
#-----------------------------------------------------------------------------

# Global declarations
$dbg=0;          # set 1 for debug: no system commands will be executed
$PROMPT="yes";   # set to no if you dont want any user confirmation on file delete
my $INNO="no";      # set to yes if you want to build INNO setup installer
my @INFILES=();     # array for *.in files
my $PGMNAME="@PGMNAME@"; # program executable name
my $VERSION="@VERSION@"; # version string
# Get system info for archive filename

# temporary subdirectory for the archive
my $TD="$PGMNAME-$VERSION-$HOST-$SYSNAME";

my $TD="$PGMNAME-$VERSION-$SYSNAME-$HOST";

# ------------------------------------ PROCEDURES ------------------------------------------
# handle command line parameters
sub CmdParam {
  if ($#ARGV > -1) {
    foreach my $a (@ARGV) {
	  # printf("arg=[%s]\n",$a);
      if ($a =~ m/^[-]*Q/) {$PROMPT="no";};
	  if ($a =~ m/^[-]*inno/) {$INNO="yes";};
      if ($a =~ m/^[-]*help/) {
        print "\n";
        print "Usage:\n";
        print "perl $0 [options]\n";
        print "Options:\n";
		print "  -inno    ... build and pack windows installer using inno setup\n";
        print "  -Q       ... quiet mode: does not prompt for anything \n";
        print "  -help    ... this help \n";
        print "\n";
        exit;
      };
    };
  };
};

# ------------------------------ MAIN SECTION ----------------------------------
# process command parameters
CmdParam;

if ($INNO eq "yes") {
  my @cmd=("iscc","simres.iss");
  if (dosystem(@cmd) !=0) {die "Could not create installer. Script aborted.\n";};
  # pack the installer
  $TD="$PGMNAME-$VERSION-$SYSNAME-$HOST";
  my $instname = "$PGMNAME-$VERSION-install.exe";
  my $ARCH=ZipDirCmd($instname,$TD);
  if ( $ARCH ne "" ) {
    printf("Installer has been packed in $ARCH.\n");
	RmFileCmd($instname);
  } else {
    printf("WARNING! Installer could not be packed.\n");
  };
  exit 0;
};

# Check that all files are present
my @cmd=("perl","Install.pl","-test");
if (dosystem(@cmd) !=0) {die "Script aborted.\n";};



# clean/recreate target directory
if ($dbg == 0) {
  if ( -d "$TD" ) { RmDirCmd("$TD")};
  mkdir("$TD");
};

# Create package in the target directory
my @cmd=("perl","Install.pl","-dist","$TD");
dosystem(@cmd);

# Add runtime libraries from ./rtlib (optional)
my @rtlib = ();
my $rtdir = "";
if ($SYSNAME eq "win32") {
  $rtdir = "rtlib/windows";
  if (-d "$rtdir") {
	@rtlib = glob("$rtdir/*");
  };
} else {
  $rtdir = "rtlib/linux"; 
  if (-d "$rtdir") {  
	@rtlib = glob("$rtdir/*");
  };
};

if (scalar(@rtlib)>0) {
  foreach my $f (@rtlib) {
    my $T = UX2DOS("$TD/bin");
    printf("rtlib: [%s] -> [%s]\n",$f,$T);
    FileCopyCmdEx($f,$T,"0755",$rtdir);
  };
};

# pack the directory
my $ARCH=ZipDirCmd($TD,$TD);

# remove the temporary directory
RmDirCmd($TD);

if ( $ARCH ne "" ) {
  printf("Archive $ARCH has been created.\n");
} else {
  printf("WARNING! Archive could not be created.\n");
};







