; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define HOMEPAGE "@HOMEPAGE@"
#define PGMNAME "@PGMNAME@"
#define VERSION "@VERSION@"
#define EXENAME "@EXENAME@"
#define DEMO "crystals,DCSANS,guides,PWD,PWD-TOF,multichannel_guides,TAS"
#define MyAppName "Simres"
#define MyAppPublisher "Nuclear Physics Institute, ASCR, Øež"
#define MyAppExeName "simres.bat"
;#define MyAppExeName "Simres.exe"
#define MyAppSrc "."
#define MyAppNotes "simres-release-notes.pdf"
#define MyAppGuide "simres-guide.pdf"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{1A55A66C-44FE-4EE1-937E-69F876AF6F7D}
AppName={#MyAppName}
AppVersion={#VERSION}
;AppVerName={#MyAppName} {#VERSION}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#HOMEPAGE}
AppSupportURL={#HOMEPAGE}
AppUpdatesURL={#HOMEPAGE}
DefaultDirName={commonpf64}\Restrax\Simres
DefaultGroupName={#MyAppName}
LicenseFile={#MyAppSrc}\COPYING.md
InfoBeforeFile={#MyAppSrc}\README.md
OutputDir=.
OutputBaseFilename={#PGMNAME}-{#VERSION}-install
SetupIconFile={#MyAppSrc}\resources\simres.ico
Compression=lzma
SolidCompression=yes
AppContact=saroun@ujf.cas.cz

[Languages]
Name: english; MessagesFile: compiler:Default.isl

[Tasks]
Name: desktopicon; Description: {cm:CreateDesktopIcon}; GroupDescription: {cm:AdditionalIcons}; 
Name: quicklaunchicon; Description: "Create icon in start menu"; GroupDescription: {cm:AdditionalIcons}; MinVersion: 10;

[Files]
; NOTE: Don't use "Flags: ignoreversion" on any shared system files
; root files
Source: {#MyAppSrc}\resources\simres.ico; DestDir: {app}; Flags: ignoreversion
; Source: {#MyAppSrc}\motd; DestDir: {app}; Flags: ignoreversion
Source: {#MyAppSrc}\templates\simres.bat.in; DestDir: {app}; Flags: ignoreversion
Source: {#MyAppSrc}\templates\simres_console.bat.in; DestDir: {app}; Flags: ignoreversion
Source: {#MyAppSrc}\templates\startGUI_win32.bat.in; DestDir: {app}; Flags: ignoreversion
Source: {#MyAppSrc}\templates\startCON_win32.bat.in; DestDir: {app}; Flags: ignoreversion
Source: {#MyAppSrc}\README.md; DestDir: {app}; Flags: ignoreversion
Source: {#MyAppSrc}\COPYING.md; DestDir: {app}; Flags: ignoreversion
Source: {#MyAppSrc}\LICENSE; DestDir: {app}; Flags: ignoreversion
Source: {#MyAppSrc}\variables.ini; DestDir: {app}; Flags: deleteafterinstall ignoreversion
; Source: {#MyAppSrc}\Install.pl; DestDir: {app}; Flags: ignoreversion
Source: {#MyAppSrc}\resources\doc\{#MyAppNotes}; DestDir: {app}\doc; Flags: ignoreversion
Source: {#MyAppSrc}\resources\doc\{#MyAppGuide}; DestDir: {app}\doc; Flags: ignoreversion
; binary files
Source: {#MyAppSrc}\bin\{#EXENAME}; DestDir: {app}\bin; Flags: ignoreversion
Source: {#MyAppSrc}\bin\jsdrivlib.dll; DestDir: {app}\bin; Flags: ignoreversion
Source: {#MyAppSrc}\lib\pgplot\jsdriv_server.exe; DestDir: {app}\lib\pgplot; Flags: ignoreversion
Source: {#MyAppSrc}\bin\libmcplio.dll; DestDir: {app}\bin; Flags: ignoreversion
Source: {#MyAppSrc}\bin\libpgplot.dll; DestDir: {app}\bin; Flags: ignoreversion
Source: {#MyAppSrc}\rtlib\windows\libgcc_s_seh-1.dll; DestDir: {app}\bin; Flags: ignoreversion
Source: {#MyAppSrc}\rtlib\windows\libquadmath-0.dll; DestDir: {app}\bin; Flags: ignoreversion
; other directories
Source: {#MyAppSrc}\resources\setup\*; DestDir: {app}\setup; Flags: ignoreversion recursesubdirs
;PGPLOT
Source: {#MyAppSrc}\lib\pgplot\grfont.dat; DestDir: {app}\lib\pgplot; Flags: ignoreversion recursesubdirs
Source: {#MyAppSrc}\lib\pgplot\rgb.txt; DestDir: {app}\lib\pgplot; Flags: ignoreversion recursesubdirs
; GUI
Source: {#MyAppSrc}\templates\GUI\restraxGUI.ini.in; DestDir: {app}\GUI; Flags: ignoreversion
Source: {#MyAppSrc}\templates\GUI\restraxCON.ini.in; DestDir: {app}\GUI; Flags: ignoreversion
Source: {#MyAppSrc}\submodules\simresUI\dist\simresGUI.jar; DestDir: {app}\GUI; Flags: ignoreversion
Source: {#MyAppSrc}\submodules\simresUI\dist\simresCON.jar; DestDir: {app}\GUI; Flags: ignoreversion
Source: {#MyAppSrc}\submodules\simresUI\dist\j3d-jre\*; DestDir: {app}\GUI\j3d-jre; Flags: ignoreversion recursesubdirs
; test projects
Source: {#MyAppSrc}\tests\*; Excludes: CVS\*,*.ini,*.mcpl, *.tg; DestDir: {app}\tests; Flags: ignoreversion recursesubdirs
; demo projects
Source: {#MyAppSrc}\resources\demo\BEER\*; Excludes: CVS\*,*.ini,*.mcpl, *.tg; DestDir: {app}\demo\BEER; Flags: ignoreversion recursesubdirs
Source: {#MyAppSrc}\resources\demo\STRESSSPEC\*; Excludes: CVS\*,*.ini,*.mcpl, *.tg; DestDir: {app}\demo\STRESSSPEC; Flags: ignoreversion recursesubdirs
Source: {#MyAppSrc}\resources\demo\ENGINX\*; Excludes: CVS\*,*.ini,*.mcpl, *.tg; DestDir: {app}\demo\ENGINX; Flags: ignoreversion recursesubdirs
Source: {#MyAppSrc}\resources\demo\MEREDIT\*; Excludes: CVS\*,*.ini,*.mcpl, *.tg; DestDir: {app}\demo\MEREDIT; Flags: ignoreversion recursesubdirs
Source: {#MyAppSrc}\resources\demo\MAUD\*; Excludes: CVS\*,*.ini,*.mcpl, *.tg; DestDir: {app}\demo\MAUD; Flags: ignoreversion recursesubdirs
Source: {#MyAppSrc}\resources\demo\TAS\*; Excludes: CVS\*,*.ini,*.mcpl, *.tg; DestDir: {app}\demo\TAS; Flags: ignoreversion recursesubdirs
Source: {#MyAppSrc}\resources\demo\crystal_reflectivity\*; Excludes: CVS\*,*.ini,*.mcpl, *.tg; DestDir: {app}\demo\crystal_reflectivity; Flags: ignoreversion recursesubdirs
Source: {#MyAppSrc}\resources\demo\multiple_reflections\*; Excludes: CVS\*,*.ini,*.mcpl, *.tg; DestDir: {app}\demo\multiple_reflections; Flags: ignoreversion recursesubdirs
Source: {#MyAppSrc}\resources\demo\simres_mcstas\*; Excludes: CVS\*,*.ini,*.mcpl, *.tg; DestDir: {app}\demo\simres_mcstas; Flags: ignoreversion recursesubdirs
[Icons]
Name: {group}\{#MyAppName}; Filename: {app}\{#MyAppExeName}; WorkingDir: {app}; IconFilename: {app}\simres.ico
Name: {group}\Simres console; Filename: {app}\simres_console.bat; WorkingDir: {app}; IconFilename: {app}\simres.ico
Name: {group}\Release notes; Filename: {app}\doc\{#MyAppNotes}
Name: {group}\User guide; Filename: {app}\doc\{#MyAppGuide}
Name: {group}\{cm:ProgramOnTheWeb,{#MyAppName}}; Filename: {#HOMEPAGE}
Name: {group}\{cm:UninstallProgram,{#MyAppName}}; Filename: {uninstallexe}
Name: {autodesktop}\{#MyAppName}; Filename: {app}\{#MyAppExeName}; Tasks: desktopicon; WorkingDir: {app}; IconFilename: {app}\simres.ico
Name: {autostartmenu}\Programs\{#MyAppName}; Filename: {app}\{#MyAppExeName}; Tasks: quicklaunchicon; WorkingDir: {app}; IconFilename: {app}\simres.ico

[UninstallDelete]
Name: {app}; Type: filesandordirs

[Code]
var DbgLog: TStringList;
MyReplace: TStringList;
JRE:String;


function InitializeSetup(): Boolean;
begin
  DbgLog:=TStringList.create;
  MyReplace:=TStringList.create;
  result:=true;
  JRE:='';
end;

procedure ListFiles(const Directory: string; Files: TStrings);
var
  FindRec: TFindRec;
begin
  Files.Clear;
  DbgLog.add('Search for Java in '+Directory);
  DbgLog.add('FILE_ATTRIBUTE_DIRECTORY= '+IntToStr(FILE_ATTRIBUTE_DIRECTORY));
  if FindFirst(ExpandConstant(Directory + '*'), FindRec) then
  try
    repeat
      DbgLog.add('try ['+FindRec.Name+'] '+IntToStr(FindRec.Attributes)); 
      if ((FindRec.Attributes and FILE_ATTRIBUTE_DIRECTORY)>0)
         and (length(FindRec.Name)>0) 
        // and (not (substr(FindRec.Name,0,1)='.')) then
         and (not (FindRec.Name[1]='.')) then
      begin
           DbgLog.add('Java Directory= '+FindRec.Name);
           Files.Add(AddBackslash(Directory)+FindRec.Name);
      end;
    until
      not FindNext(FindRec);
  finally
    FindClose(FindRec);
  end;
end;

// try to find latest java launcher for 32 bits
function GetJRE(bits:integer): boolean;
var s,f,src,msg:string;
i:integer;
res:boolean;
jlist:TStringList;
begin
  if (bits=32) then
  begin
    src:=AddBackslash(ExpandConstant('{autopf32}'))+'Java\';
  end else
  begin
    src:=AddBackslash(ExpandConstant('{autopf64}'))+'Java\';
  end;
  res:=((length(JRE)>0) and FileExists(JRE));
  if (not res) then DbgLog.add('trying to find Java launcher ... ');

  jlist:=TStringList.create;
  ListFiles(src, jlist);
  for i:=0 to jlist.count-1 do
  begin
    s:=AddBackslash(jlist[i])+'bin';
    DbgLog.add('    path='+s);
    if (DirExists(s)) then
    begin
      f:=AddBackslash(s)+'java.exe';
      if (FileExists(f)) then
      begin
			  JRE:=f;
			  DbgLog.add('found JRE = '+JRE);
			  res:=true;
      end;
    end;
  end;
  {
  if (jlist.count>1) then
  begin
     msg:='Found multiple Java VMs. Choose one.';
     s:=jlist[jlist.count-1];
     if BrowseForFolder(msg, s, False) then
     if (DirExists(s)) then
     begin
       f:=AddBackslash(s)+'bin\java.exe';
       if (FileExists(f)) then
       begin
			   JRE:=f;
			   DbgLog.add('selected JRE = '+JRE);
			   res:=true;
       end else
       begin
          msg:='This does not seem to be a Java VM'+#13;
          msg:=msg+s;
          DbgLog.add(msg);
          MsgBox(msg, mbError, MB_OK);
       end;
     end;
  end;
  }
  result:=res;
end;


// try to find latest java launcher for 32 bits from registry
// try  JavaSoft\1.n and Wow6432Node\JavaSoft\1.n nodes
function GetJREreg32(): boolean;
var sq,key,sreg,f:string;
i,j:integer;
res,is86:boolean;
begin
  i:=10;
  j:=0;
  res:=((length(JRE)>0) and FileExists(JRE));
  if (not res) then DbgLog.add('trying to find Java launcher ... ');
  sreg:='HKLM\Software\JavaSoft\Java Runtime Environment\1.';
  while ((not res) and (i>5)) do
  begin
    sq:='{reg:'+sreg+intToStr(i)+',JavaHome|empty}';
    key:=ExpandConstant(sq);
    is86:=(Pos('x86',key)>1);
    DbgLog.add('    reg='+sq);
    if (is86 and DirExists(key)) then
    begin
		  f:=AddBackslash(key)+'bin\java.exe';
		  if (FileExists(f)) then
		  begin
			  JRE:=f;
			  DbgLog.add('found JRE = '+JRE);
			  res:=true;
		  end;
    end;
	  i:=i-1;
    if ((i = 5) and (j=0)) then
    begin
      j:=1;
      sreg:='HKLM\Software\Wow6432Node\Java Runtime Environment\JavaSoft\1.';
      i:=10;
    end;
  end;
  if (res) then DbgLog.add('found JRE: '+JRE);
  result:=res;
end;



procedure StrToStringList(source,dlm:string;var list:TStringList);
var S:string;
	i,L:integer;
begin
  S:=source;
  i:=Pos(dlm,S);
  while (i>0) do
  begin
    list.add(copy(S,1,i-1));
    L:=length(S);
    S:=copy(S,i+1,L);
    i:=Pos(dlm,S);
  end;
  if (length(S)>0) then list.add(S);
end;

function getValue(input:string):string;
var i:integer;
begin
  i:=Pos('=',input);
  if (i>0) then
  begin
    result:=copy(input,i+1,length(input));
  end else result:='';
end;

function getName(input:string):string;
var i:integer;
begin
  i:=Pos('=',input);
  if (i>0) then
  begin
    result:=copy(input,1,i-1);
  end else result:='';
end;

procedure DefineVarReplacement;
begin
	MyReplace.LoadFromFile(AddBackslash(ExpandConstant('{app}'))+'variables.ini');
	MyReplace.add('INSTDIR='+ExpandConstant('{app}'));
	MyReplace.add('JRE='+JRE);
end;



procedure DeinitializeSetup;
begin
  DbgLog.free;
end;

// find all *.ini.in files in given directory
procedure FindIniTemplates(dir:string; var list:TStringList);
var
  FilesFound: Integer;
  FindRec: TFindRec;
begin
  FilesFound := 0;
  list.clear;
  if FindFirst(AddBackslash(dir)+'*.in',FindRec) then
  begin
    try
      repeat
        // Don't count directories
        if FindRec.Attributes and FILE_ATTRIBUTE_DIRECTORY = 0 then
        begin
			FilesFound := FilesFound + 1;
			list.add(AddBackslash(dir)+FindRec.Name);
        end;
      until not FindNext(FindRec);
    finally
      FindClose(FindRec);
    end;
  end;
  // MsgBox(IntToStr(FilesFound) + ' files found in the directory '+dir+' '+list[0], mbInformation, MB_OK);
end;

// process given ini.in template
procedure ParseIniFile(replace:TStringList;filename:string);
var i,j:integer;
	S:TStringList;
	fnex,nm,val,str:string;
begin
  S:=TStringList.create;
  fnex:=ChangeFileExt(filename,'');
  DbgLog.add('   '+filename+ ' -> '+fnex);
  S.LoadFromFile(filename);
  for i:=0 to S.count-1 do
  begin
    if (Pos('@',S[i])>0) then
    for j:=0 to replace.count-1 do
    begin
      if (Pos('=',replace[j])>0) then
      begin
        nm:=getName(replace[j]);
        val:=getValue(replace[j]);
      //  DbgLog.add(nm+'='+val);
        str:=S[i];
      //  StringChangeEx(str,'aaa','ccc',true);
		StringChangeEx(str,'@'+nm+'@', val, True);
		S[i]:=str;
      end;
    end;
  end;
  S.SaveToFile(fnex);
  S.free;
end;

// process all ini.in templates in given directory
procedure ParseIniDir(dir:string);
var S:TStringList;
	i:integer;
begin
	S:=TStringList.create;
	FindIniTemplates(dir,S);
	for i:=0 to S.count-1 do
	begin
		ParseIniFile(MyReplace,S[i]);
		DeleteFile(S[i]);
	end;
	S.free;
end;

procedure ParseAllIniFiles;
var i:integer;
	list:TStringList;
begin
  DefineVarReplacement;
  DbgLog.add('Parsing in files:');
  ParseIniDir(ExpandConstant('{app}'));
  ParseIniDir(AddBackslash(ExpandConstant('{app}'))+'GUI');
  list:=TStringList.create;
  StrToStringList(ExpandConstant('{#DEMO}'),',',list);
  for i:=0 to list.count-1 do
  begin
    ParseIniDir(AddBackslash(ExpandConstant('{app}'))+'demo\'+list[i]);
  end;
  list.free;
  MyReplace.free;
end;

procedure CurStepChanged(CurStep: TSetupStep);
var s:string;

i:integer;
begin

try
 if (CurStep = ssInstall) then
// pre-install
 begin
    //if (not getJREreg()) then

    if (not getJRE(64)) then
    begin
      DbgLog.add('java not found !!!');
      s:='Java VM for 64 bit platform was not found.'+#13;
      s:=s+'Install 64 bit Java JRE or SDK first'+#13;
      s:=s+'(see https://openjdk.java.net/).'+#13+#13;

      s:=s+'You can provide full path to java.exe later in the startup script: '+#13;
      s:=s+AddBackslash(ExpandConstant('{app}'))+ExpandConstant('{#MyAppExeName}')+#13+#13;
      s:=s+'Do you want to continue?';
      if MsgBox(s, mbError, MB_YESNO) <> IDYES then
      begin
        DbgLog.add('Installation aborted.');
        s:='';
        for i:=0 to DbgLog.count-1 do
        begin
          s:=s+DbgLog[i]+#13;
        end;
        MsgBox(s, mbInformation, MB_OK);
        Abort;
      end;
    end else 
    begin
      s:='Found Java VM for 64 bit platform:'+#13;
      s:=s+JRE+#13+#13;
      s:=s+'You can change this selection by editing the startup: '+#13;
      s:=s+AddBackslash(ExpandConstant('{app}'))+ExpandConstant('{#MyAppExeName}')+#13;  
      MsgBox(s, mbInformation, MB_OK);
    end;
 end
 else  if (CurStep = ssPostInstall) then
// post-install
 begin
   ParseAllIniFiles;
   // MsgBox(DbgLog.text, mbInformation, MB_OK);
   DbgLog.SaveToFile(AddBackslash(ExpandConstant('{app}'))+'setup.log');
 end
 else if (CurStep = ssDone) then
// install successful
 begin
 end;
except
  DbgLog.SaveToFile(AddBackslash(ExpandConstant('{app}'))+'setup.log');
end;

end;


