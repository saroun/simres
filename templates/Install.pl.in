#! /usr/bin/perl
##################################################################
#  $Id$
#  *****  Installation script for SIMRES  *****
#  Usage: perl Install.pl <installation directory>
# Edit the "PROJECT DEFINITIONS" section below to modify the contents
# of installation package.
# The script is used to install SIMRES on Linux.
# It also works on Windows, but the JRE variable in the startup script
# startGUI_win32.bat has to be set manually.
##################################################################
BEGIN {
	push @INC, '.';
}
use Restrax;
use strict;
use Cwd;

use vars qw/*dbg *SYSNAME *HOST/;
*SYSNAME  = *Restrax::SYSNAME;
*HOST     = *Restrax::HOST;

# Global declarations
$dbg=0;          # set 1 for debug: no system commands will be executed
my $ThisScript=$0;  # name of this script
my %VARS;           # hash table for substitutions
my $CD=cwd();       # current directory
my @INFILES=();     # array with *.in files
my @SRCFILES=();    # array with files to install
my @EXECS=();       # executables cripts
my $BITS=@BITS@; # 32 or 64
my @notfound=();  # files not found = not installed
my @installed=();  # files installed

# define hash table for substitution (from configure)
$VARS{'HOMEPAGE'}="@HOMEPAGE@"; # home page URL
$VARS{'PGMNAME'}="@PGMNAME@";   # program name (restrax)
$VARS{'VERSION'}="@VERSION@";   # version string, e.g. 5.1.0
$VARS{'BDATE'}="@BDATE@";       # build date stamp
$VARS{'EXENAME'}="@EXENAME@";   # executable name 
$VARS{'SHEXT'}="@SHEXT@";       # extension for shared libraries (so or dll)
$VARS{'JRE'}="/usr/bin/java";   #  Java VM launcehr for Linux
$VARS{'PGPLOT_DEV'}="@PGPLOT_DEV@";  # default device for PGPLOT
$VARS{'PGPLOT_DIR'}="lib/pgplot";  # pgplot directory with grfont.dat etc. in the target folder

# define hash table for substitution (direct)
$VARS{'SYSNAME'}="@SYSNAME@";    # OS name
$VARS{'HOST'}="@HOST@"; # short host name 
$VARS{'CONSOLE'}="-cons"; # option for GUI: enable console (for Linux)
$VARS{'J3DLIB'}="@J3DLIB@"; 
$VARS{'J3DCLS'}="@J3DCLS@"; 
$VARS{'PWD'}=UX2DOS($CD);          # current directory 



# check system compatibility
sub CheckSystem;
if (CheckSystem != 0) {
 printf("If you still want to continue, edit SYSNAME and HOST variables in $0 ");
 printf("to match your system and repeat the command.\n");
 exit 1;
};


# process parameters
sub CmdParam;
CmdParam;

# Define target directory as $TD, full path
my $TD=UX2DOS($VARS{'INSTDIR'});
# installation in a subdirectory: add current directory as parent
if ($TD !~ m/^(\/.*|[a-zA-Z]:.*)/) {
	$TD=UX2DOS("$VARS{'PWD'}/$VARS{'INSTDIR'}");
}
$VARS{'INSTDIR'}="$TD";

# -------------------  PROJECT DEFINITIONS (edit to your convenience)------------

# source files/directories
my @SOURCES=("setup", "licenses",
  "README.md", "COPYING.md", "LICENSE", "INSTALL.md", "doc/simres-guide.pdf", "doc/simres-release-notes.pdf");
# GUI
push @SOURCES,("GUI/@PGMNAME@GUI.jar","GUI/@PGMNAME@CON.jar", "GUI/JSUtils.jar");
# PGPLOT grfont
push @SOURCES,("lib/pgplot/grfont.dat");

# add demo projects
my @DEMOS = ("demo/STRESSSPEC","demo/BEER","demo/ENGINX",
     "demo/MEREDIT","demo/TAS","demo/simres_mcstas","demo/multiple_reflections",
    "demo/crystal_reflectivity","demo/MAUD");
push @SOURCES,@DEMOS;

# template *.in files, if not already included in the directories above
# (they won't be copied, but parsed)
my @TEMPLATES = glob("GUI/*.in");
push @TEMPLATES, ("motd.in");
if ($SYSNAME eq "win32") {
  push @TEMPLATES,("startGUI_win32.bat.in","startCON_win32.bat.in");
} else {
  push @TEMPLATES,("startGUI.in","startCON.in");
};

# executable scripts
if ($SYSNAME eq "win32") {
  push @EXECS,("startGUI_win32.bat","startCON_win32.bat");
} else {
  push @EXECS,("startGUI","startCON");
};

# executable binaries
my @BINARIES=("bin/$VARS{'EXENAME'}");
if ($SYSNAME eq "win32") {
	push @BINARIES,("bin/jsdrivlib.dll","bin/libmcplio.dll","bin/libpgplot.dll");
	push @BINARIES,("lib/pgplot/jsdriv_server.exe");
	push @BINARIES,glob("GUI/$VARS{'J3DLIB'}/*.dll");  # Java 3D libraries
	# add compiled mcstas example ...
	push @BINARIES,glob("demo/simres_mcstas/mcstas/*.exe");
} else {
	push @BINARIES,glob("GUI/$VARS{'J3DLIB'}/*.so");  # Java 3D libraries
	push @BINARIES,glob("lib/*.so");
	push @BINARIES,glob("lib/pgplot/pgxwin_server");
};

# Java 3D library, jar files
push @SOURCES,glob("GUI/$VARS{'J3DCLS'}/*.jar");
# other external jar files
push @SOURCES,glob("GUI/lib/*.jar");



# ------------------------------ SUBROUTINES ----------------------------------

sub CheckSystem {
    my $res = 0;
	if ( ! ($VARS{'SYSNAME'} eq $SYSNAME)) {
	  printf("Incompatible system %s, required %s\n",$SYSNAME,$VARS{'SYSNAME'});
	  $res = 1;
	};
	if ( ! ($VARS{'HOST'} eq $HOST)) {
	  printf("Incompatible platform %s, required %s\n",$HOST,$VARS{'HOST'});
	  $res = 1;
	};
	return $res;
};

# handle command line parameters
sub CmdParam {
  if ($#ARGV > -1) {
    $VARS{'INSTDIR'} = shift @ARGV;
  #  foreach my $a (@ARGV) {
  #    if ($a =~ m/[-]*noparse\z/) {$PARSE="no";};
  #  };
   } else {
    print "\n";
    print "Usage:\n";
 #   print "perl $0 <target directory> [options] \n";
    print "perl $0 <target directory> \n";
    print "Arguments:\n";
    print "     <target directory> ... where you want to install the package (must exist)\n";    
 #   print "Options:\n";
 #   print "    -noparse        ... does not parse *.in files \n";
    print "\n";
    exit 0;
  };
  if ($VARS{'INSTDIR'} eq "") {$VARS{'INSTDIR'}=".";};
  # check the target directory
  if (! -e "$VARS{'INSTDIR'}") {
    printf("Target directory %s does not exist.\n",$VARS{'INSTDIR'});
    die "Create one first.\n";
  };
};


# Scan *.in files in directories defined in @_ and substitute for
# variables marked as , using the %VARS hash table
sub ProcessInFiles {
    my $tgt;
    printf("Processing templates: \n");
    foreach my $F (@INFILES) {
      if ($F !~ m/^.*$ThisScript\.in/) { # don't process Install.pl.in
        $tgt=SubstituteInFile($F,$TD,\%VARS);
		if ($tgt eq "") {
			push @notfound,("$F");
		} else {
			push @installed,("$tgt");
		};
      };
    };
};

# message at the end
sub EndTasks {
  my $f;
# print final messages
  printf("%s %s installed in %s.\n",$VARS{'PGMNAME'},$VARS{'VERSION'},$TD);
  if ($SYSNAME eq 'win32') {
    $f="startGUI_win32.bat";
    chmod oct("0755"),"$TD/$f";
	chmod oct("0755"),"$TD/startCON_win32.bat";
  } else {
    $f="startGUI";
   # chmod oct("0755"),"$TD/restrax_run";
   # chmod oct("0755"),"$TD/start";
	chmod oct("0755"),"$TD/$f";
	chmod oct("0755"),"$TD/startCON";
  };
  printf("Run it by calling the script '%s/%s' \n\n",$TD,$f);
};


sub WriteInstalledList {
    my $target= shift  @_;  # input file
	
	open(OUTFILE,">$target") or die "Cannot create output file $target:\n $!\n";
	foreach my $F (@installed) {
		printf(OUTFILE "%s\n",UX2DOS($F));
	};
	close(OUTFILE);
}


# find Java VM launcher on Linux
#-----------------------------------------------------
sub findJRE {
	my $ver=32; # 32 or 64
	if ($BITS == 64) {$ver=64;}; 
	my @DIRS = glob("/usr/lib/jvm/*"); # search directories
	my @javas = ();
	my %goodJRE;
	printf("Searching for Java VM:\n");
	$VARS{'JRE'}="";
	foreach my $d (@DIRS) {
		if ( -d $d ) {
			my $jre=$d."/jre/bin/java";
			if ( -f $jre) {
			  push @javas ,$jre;
			};
		};
	};

	foreach my $f (@javas) {
			# printf("jre=%s\n",$f);
			my $out=`$f -d$ver -version 2>&1`;
		if ( $out =~ m/version[\s\t]*"([0-9_.]+)"/) {
			printf("matched %s\n",$1);
			$goodJRE{$1}=$f;
		};	
	};

	# min. version > 1.7
	my $minver="1.7"; 
	$ver="0.0";
	for my $key (sort keys %goodJRE) {
		if ($key > $ver) {
			$VARS{'JRE'}=$goodJRE{$key};
			$ver=$key;
		};
	};

	if ($ver > $minver) {
		printf("Found Java VM version=%s\n%s\n\n",$ver,$VARS{'JRE'});
		printf("You can change this choice in %s/startGUI.\n",$TD);
		printf("Press any key to continue ...",$TD);
		<STDIN>;
	} else {
		printf("No suitable Java VM found for %s\n",$SYSNAME);
		printf("You will need to define JRE maually in %s/startGUI.\n",$TD);
		printf("Press any key to continue ...",$TD);
		<STDIN>;
		# die "Installation failed.";
	};
};

# ------------------------------ MAIN SECTION ----------------------------------

# collect all *.in files
@INFILES = CollectResourcesEx("in","","templates",@TEMPLATES);

# collect all except *.in and *.obj files
@SRCFILES = CollectResources("","in|obj|o|exe|mcpl",@SOURCES);


# installing to the current directory - no copying
if (("$TD" eq "$CD") || ("$TD" eq ".")) { 
  ProcessInFiles;
  EndTasks;
  exit;
};

# install resource files
my @notfound=();
printf("Installs resources: \n");
foreach my $F (@SRCFILES) {
  if ((my $res = FileCopyCmd($F,$TD,"0644")) ne "") {
    push @installed,("$res");
  } else {
    push @notfound,("$F");
  };
};
printf("\n");

# install executable scripts
printf("Set exec privileges on executable scripts: \n");
foreach my $F (@EXECS) {
  SetChmod($F,$TD,"0755");
};
printf("\n");

# install binaries
printf("Installs executable binary files \n");
foreach my $F (@BINARIES) {
  if ((my $res = FileCopyCmd($F,$TD,"0755")) ne "") {
    push @installed,("$res");
  } else {
    push @notfound,("$F");
  };
};

findJRE;
# Substitute for variables in *.in files
ProcessInFiles;
EndTasks;
WriteInstalledList("$TD/install.log");

# report uninstalled files:
if ($#notfound > -1) {
  printf("WARNING! Could not find following files: \n");
  foreach my $f (@notfound) {
    printf("     %s \n",$f);
  };
  die;
};

