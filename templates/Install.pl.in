#! /usr/bin/perl
##################################################################
#  $Id$
#  *****  Installation script for SIMRES  *****
#  Usage: perl Install.pl <installation directory>
# Edit the "PROJECT DEFINITIONS" section below to modify the contents
# of installation package.
# The script is used to install SIMRES on Linux.
# It also works on Windows, but the JRE variable in the startup script
# startGUI_win32.bat has to be set manually.
##################################################################
BEGIN {
  push @INC, '.';
}
use Restrax;
use strict;
use Cwd;

use vars qw/*dbg *SYSNAME *HOST/;
*SYSNAME  = *Restrax::SYSNAME;
*HOST     = *Restrax::HOST;

# Global declarations
$dbg=0;          # set 1 for debug: no system commands will be executed
my $ThisScript=$0;  # name of this script
my %VARS;           # hash table for substitutions
my $TD="distr";   # target directory
my $CD=cwd();       # current directory
my @INFILES=();     # array with *.in files
my @SRCFILES=();    # array with files to install
my @GUIFILES=();    # array with files to install, GUI
my @EXECS=();       # executables cripts
my $BITS=@BITS@; # 32 or 64
my @notfound=();  # files not found = not installed
my @installed=();  # files installed
# Option variables:
# set to PARSE="only" if you only want to parse templates, not to copy files
my $PARSE="yes"; 
# set to DIST="yes" to create distribution package rather than install 
my $DIST="no"; 
# set TEST=yes to check that the package is complete and exit. 
my $TEST="false"; 

# define hash table for substitution (from configure)
$VARS{'HOMEPAGE'}="@HOMEPAGE@"; # home page URL
$VARS{'PGMNAME'}="@PGMNAME@";   # program name (restrax)
$VARS{'VERSION'}="@VERSION@";   # version string, e.g. 5.1.0
$VARS{'BDATE'}="@BDATE@";       # build date stamp
$VARS{'EXENAME'}="@EXENAME@";   # executable name 
$VARS{'SHEXT'}="@SHEXT@";       # extension for shared libraries (so or dll)
$VARS{'JRE'}="/usr/bin/java";   #  Java VM launcehr for Linux
$VARS{'PGPLOT_DEV'}="@PGPLOT_DEV@";  # default device for PGPLOT
$VARS{'PGPLOT_DIR'}="lib/pgplot";  # pgplot directory with grfont.dat etc. in the target folder
$VARS{'UI'}="submodules/simresUI/dist";  # user interface directory to copy from (only with -dist option)

# define hash table for substitution (direct)
$VARS{'SYSNAME'}="@SYSNAME@";    # OS name
$VARS{'HOST'}="@HOST@"; # short host name 
$VARS{'CONSOLE'}="-cons"; # option for GUI: enable console (for Linux)
$VARS{'J3DLIB'}="@J3DLIB@"; 
$VARS{'PWD'}=UX2DOS($CD);          # current directory 


# -------------------  PROJECT DEFINITIONS (edit to your convenience)------------

# readme and license info 
my @SOURCES=("licenses", "README.md", "COPYING.md", "LICENSE", "INSTALL.md");

# resources (setup files, docs)
push @SOURCES,("resources/setup", "resources/doc/simres-guide.pdf", "resources/doc/simres-release-notes.pdf");
  
# PGPLOT grfont
push @SOURCES,("lib/pgplot/grfont.dat", "lib/pgplot/rgb.txt");

# demo projects
my @DEMOS = (
"resources/demo/STRESSSPEC",
"resources/demo/BEER","demo/ENGINX",
"resources/demo/MEREDIT",
"resources/demo/TAS",
"resources/demo/simres_mcstas",
"resources/demo/multiple_reflections",
"resources/demo/crystal_reflectivity",
"resources/demo/MAUD");
push @SOURCES,@DEMOS;

# template *.in files from ./templates subdiretory
# (they will be parsed, not copied)
my @TEMPLATES = ("GUI/restraxCON.ini.in", "GUI/restraxGUI.ini.in");
push @TEMPLATES, ("motd.in", "Uninstall.pl.in");
if ($SYSNAME eq "win32") {
  push @TEMPLATES,("startGUI_win32.bat.in","startCON_win32.bat.in");
} else {
  push @TEMPLATES,("startGUI.in","startCON.in");
};


# executable binaries
my @BINARIES=("bin/$VARS{'EXENAME'}");
if ($SYSNAME eq "win32") {
  push @BINARIES,("bin/jsdrivlib.dll","bin/libmcplio.dll","bin/libpgplot.dll");
  push @BINARIES,("lib/pgplot/jsdriv_server.exe");
} else {
  push @BINARIES,("lib/libmcplio.so", "lib/libpgplot.so");
  push @BINARIES,("lib/pgplot/pgxwin_server");
};
# add compiled mcstas example ...
push @BINARIES,glob("demo/simres_mcstas/mcstas/*.exe");


# GUI files (excludes root path prefix)
my @GUI = ("@PGMNAME@GUI.jar","@PGMNAME@CON.jar","j3d-jre");

# executable scripts and libraries
my $EXECSCR;
if ($SYSNAME eq "win32") {
  $EXECSCR="startGUI_win32.bat";
  push @EXECS,("startGUI_win32.bat","startCON_win32.bat"); # launch scripts
  push @EXECS,glob("GUI/$VARS{'J3DLIB'}/*.dll");           # Java 3D libraries
} else {
  $EXECSCR="startGUI";
  push @EXECS,("startGUI","startCON");              # launch scripts
  push @EXECS,glob("GUI/$VARS{'J3DLIB'}/*.so");     # Java 3D libraries
};

# Target directories - will be created on the target if they do not exist
my @TARDIR=("GUI/");

# ------------------------------ SUBROUTINES ----------------------------------

# Check that the machine type and OS match the executing system
sub CheckSystem {
    my $res = 0;
  if ( ! ($VARS{'SYSNAME'} eq $SYSNAME)) {
    printf("Incompatible system %s, required %s\n",$SYSNAME,$VARS{'SYSNAME'});
    $res = 1;
  };
  if ( ! ($VARS{'HOST'} eq $HOST)) {
    printf("Incompatible platform %s, required %s\n",$HOST,$VARS{'HOST'});
    $res = 1;
  };
  return $res;
}

# Check that the package is complete 
sub CheckPackage {
    my $res = 0;
  my @notfound=();
  my @package=();
  push @package,@SRCFILES;
  push @package,@INFILES;
  push @package,@BINARIES;
  foreach my $f (@package) {
    if (! -e $f) {
      push @notfound,($f);
    }
  };
  # report uninstalled files:
  if ($#notfound > -1) {
      $res=1;
    printf("WARNING! Some installer files are missing: \n");
    foreach my $f (@notfound) {
      printf("     %s \n",$f);
    };
  };
  # check target directories, create when needed
  foreach my $F (@TARDIR) {
	my $TDF="$TD/$F";
    if (! -d $TDF) {
      MkSubDirCmd($TDF);
    };
  };
  return $res;
};


# handle command line parameters
sub CmdParam {
  $VARS{'INSTDIR'} = "distr";
  if ($#ARGV <= -1) {
    print "\n";
    print "Usage:\n";
    print "perl $0 <target directory> [options] \n";
    print "Arguments:\n";
    print "     <target directory> ... where you want to install the package (must exist)\n";    
    print "Options:\n";
    print "    -t, -test     ... only check that the package is complete \n";  
    print "    -p, -parse    ... only parse *.in templates, no file copy \n";
    print "    -d, -dist     ... prepare the distribution package rather, do not install \n";
    print "\n";
    print "With the -dist option, the GUI files are searched for in $VARS{'UI'} instead of ./GUI \n";
    print "\n";
    exit 0;
  };
  
  foreach my $a (@ARGV) {
  if ($a =~ m/[-].*/) {
    if ($a =~ m/[-](p|parse)\z/) {$PARSE="only";};
    if ($a =~ m/[-](t|test)\z/) {$TEST="yes";};
    if ($a =~ m/[-](d|dist)\z/) {$DIST="yes";};
  } else {
      $VARS{'INSTDIR'} = "$a";
  };
  };
  if ($VARS{'INSTDIR'} eq ".") {$VARS{'INSTDIR'}="distr";};
  # check the target directory
  if (! -e "$VARS{'INSTDIR'}") {
    printf("Target directory %s does not exist.\n",$VARS{'INSTDIR'});
    die "Create one first.\n";
  };
  if (not $DIST eq "yes") {
    $VARS{'UI'}="./GUI";
  };
  
};


# Scan *.in files in directories defined in @_ and substitute for
# variables marked as , using the %VARS hash table
sub ProcessInFiles {
    my $tgt;
    printf("Processing templates: \n");
    foreach my $F (@INFILES) {
      if ($F !~ m/^.*$ThisScript\.in/) { # don't process Install.pl.in
        $tgt=SubstituteInFile($F,$TD,\%VARS);
    if ($tgt eq "") {
      push @notfound,("$F");
    } else {
      push @installed,("$tgt");
    };
      };
    };
};

# message at the end
sub EndTasks {
# print final messages
  printf("%s %s installed in %s.\n",$VARS{'PGMNAME'},$VARS{'VERSION'},$TD);
  printf("Run it by calling the script '%s/%s' \n\n",$TD,$EXECSCR);
};


sub WriteInstalledList {
    my $target= shift  @_;  # input file
  
  open(OUTFILE,">$target") or die "Cannot create output file $target:\n $!\n";
  foreach my $F (@installed) {
    printf(OUTFILE "%s\n",UX2DOS($F));
  };
  close(OUTFILE);
}


# find Java VM launcher on Linux
#-----------------------------------------------------

sub findJRE {
  my $abovever="1.7"; # version newer than 1.7 
  my @javas = ();
  my %goodJRE;
  my $JRE="";
  my $JRE_VER="0.0";
  my $jexe="jre/bin/java"; 
  my $pgm="/usr/lib/jvm";
  if ($SYSNAME eq "win32") {
     $jexe="bin/java.exe";    
    if ($BITS eq 32) {
      $pgm=sprintf("%s/Java",$ENV{'PROGRAMFILES(X86)'});
    } else {
      $pgm=sprintf("%s/Java",$ENV{'PROGRAMFILES'});
    };
  };
  #printf("pgm=%s\n",$pgm);
  my @DIRS = glob("'$pgm/*'");   
  printf("Searching for Java VM, %d-bit:\n",$BITS);
  foreach my $d (@DIRS) {
    #printf("dir=%s\n",$d);
    if ( -d $d ) {
    my $jre=$d."/".$jexe;
    if ( -f $jre) {
      push @javas ,$jre;
    };
    };
  };

  foreach my $f (@javas) {
    #printf("jre=%s\n",$f);
    my $out=`"$f" -version 2>&1`;
    my $b=32;
    #printf("%s\n\n",$out);
    if ( $out =~ m/version[\s\t]*"([0-9_.]+)"/) {
     my $vstr=$1;
     if ( $out =~ m/64[-]bit/i) {
       $b=64;
     };
     if (($vstr > $abovever) and ($b==$BITS)) {
       $goodJRE{$vstr}=$f;
     };
    };  
  };

  #printf("found Java VM: \n");
  for my $key (sort keys %goodJRE) {
    printf("version=%-11s: %s\n",$key,$goodJRE{$key});
    $JRE=$goodJRE{$key};
    $JRE_VER=$key;
  };
  printf("\n");
  
  if ($JRE_VER > $abovever) {
    printf("Found Java VM version=%s\n%s\n\n",$JRE_VER,$JRE);
    printf("You can change this choice in %s/%s.\n",$TD,$EXECSCR);
    printf("Press any key to continue ...");
    <STDIN>;
  $VARS{'JRE'}=$JRE;
  } else {
    printf("No suitable Java VM found for %s\n",$SYSNAME);
    printf("You will need to define JRE maunally in %s/%s.\n",$TD,$EXECSCR);
    printf("Press any key to continue ...");
    <STDIN>;
  };
};

# ------------------------------ MAIN SECTION ----------------------------------


# Check system compatibility
if (CheckSystem != 0) {
 printf("If you still want to continue, edit SYSNAME and HOST variables in $0 ");
 printf("to match your system and repeat the command.\n");
 exit 1;
};

# Process parameters
CmdParam;

# Define target directory as $TD, full path
$TD=UX2DOS($VARS{'INSTDIR'});
if ($TD !~ m/^(\/.*|[a-zA-Z]:.*)/) {
    # installation in a subdirectory: add current directory as parent
  $TD=UX2DOS("$VARS{'PWD'}/$VARS{'INSTDIR'}");
}
$VARS{'INSTDIR'}="$TD";

# collect all *.in files from ./templates
@INFILES = CollectResourcesEx("in","","templates",@TEMPLATES);

# collect all defined in SOURCES, except *.in,*.o,*.mcpl and *.exe files
@SRCFILES = CollectResources("","in|obj|o|exe|mcpl",@SOURCES);

# collect all defined in GUI
@GUIFILES = CollectResourcesEx("","","$VARS{'UI'}",@GUI);

# test package and exit if failed
my $res = CheckPackage;
if ($TEST eq "yes" || $res != 0) {exit $res;};

# installing to the current directory or -parseonly: 
# no copying, only process *.in files and exit
if (("$TD" eq "$CD") || ("$TD" eq ".") || ($PARSE eq "only") ) { 
  ProcessInFiles;
  EndTasks;
  exit;
};

# Main installation section:
#-----------------------------------

# install resource files
my @notfound=();
printf("Install all except executable binary files: \n");
foreach my $F (@SRCFILES) {
  if ((my $res = FileCopyCmdEx($F,$TD,"0644",'resources')) ne "") {
    push @installed,("$res");
  } else {
    push @notfound,("$F");
  };
};
printf("\n");

# install binaries
printf("Install executable binary files \n");
foreach my $F (@BINARIES) {
  if ((my $res = FileCopyCmd($F,$TD,"0755")) ne "") {
    push @installed,("$res");
  } else {
    push @notfound,("$F");
  };
};

# install GUI
printf("Install GUI\n");
foreach my $F (@GUIFILES) {
  my $GUITGT = UX2DOS("$TD/GUI");
  if ((my $res =  FileCopyCmdEx($F,$GUITGT,"0644",$VARS{'UI'})) ne "") {
    push @installed,("$res");
  } else {
    push @notfound,("$F");
  };
};


# set access rights for executable scripts
printf("Set exec privileges on executable scripts: \n");
foreach my $F (@EXECS) {
  SetChmod($F,$TD,"0755");
};
printf("\n");


# try to find JRE (defines path to java command in $VARS{'JRE'})
findJRE;
# Substitute for variables in *.in files
ProcessInFiles;
EndTasks;
WriteInstalledList("$TD/install.log");

# report uninstalled files:
if ($#notfound > -1) {
  printf("WARNING! Could not find following files: \n");
  foreach my $f (@notfound) {
    printf("     %s \n",$f);
  };
  die;
};

