#! /usr/bin/perl
##################################################################
#  $Id$
#  *****  Uninstall script for SIMRES  *****
#  Usage: perl Uninstall.pl <installation directory>
# Edit the "PROJECT DEFINITIONS" section below to modify the contents
# of installation package.
# The script can be used to uninstall SIMRES, previously installed 
# with the Install.pl script.
##################################################################
BEGIN {
	push @INC, '.';
}
use strict;
use Cwd;
use File::Path qw(remove_tree);

# target directory
my $TD='@INSTDIR@';
# top level directory tree
my @tree = ("bin","lib","GUI","setup","licenses","demo","doc"); 

# process parameters
sub CmdParam;
sub removeInstalled;
CmdParam;
removeInstalled;	

# ------------------------------ SUBROUTINES ----------------------------------
sub prnHelp {
    print "\n";
    print "Usage:\n";
    print "perl $0 [options] \n";  
    print "Options:\n";
    print "    -help     ... print this help\n";
	print " \n";
}

# handle command line parameters
sub CmdParam {
  foreach my $a (@ARGV) {
	if ($a =~ m/^[-].*/) {
		if ($a =~ m/[-]help\z/) {prnHelp;};
	};
  };
  # check the target directory
  if (! -e "$TD") {
    printf("Target directory %s does not exist.\n",$TD);
    exit 0;
  };
};
									 
#  Remove all files logged in the install.log file.
sub removeInstalled {
  my $rmpath = "$TD/install.log";
  my @cont=(); 
  if (! -e $rmpath) {
     printf("No install log was found. Expected %s\n",$rmpath);
     exit 0;
  };
  my $lino=0;
  open(INFILE,  "<$rmpath") or die "Can't open $rmpath:\n $!\n";
  while (<INFILE>) {
	$lino = $lino + 1;
	my $LINE=$_;
	$LINE =~ s/[\n\r]//;
	#printf("    [%s]\n",$LINE);
	if ( -e "$LINE") {
	   push @cont,("$LINE");
    } else {
	  printf("not found [%s]\n",$LINE);
	}
  };
  push @cont,("$rmpath");
  close(INFILE);
  foreach my $file ( @cont ) {
     printf("    %s\n",$file);
	 unlink($file) or warn "Could not delete $file: $!";
  };
  
  foreach my $d ( @tree ) {
     my $dd = "$TD/$d";
	 printf("%s\n",$dd);
     if ( -d $dd) {
	   remove_tree( "$dd", {keep_root => 1, safe => 1}, keep_root => 0 ) or warn "Cannot remove '$dd' : $!";
	 };
  };
}
