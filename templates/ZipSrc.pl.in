#! /usr/bin/perl
##################################################################
#  $Id: ZipSrc.pl.in,v 1.17 2019/09/06 19:32:11 saroun Exp $
#  *****  Script for packing SIMRES  source distribution *****
#  Usage: perl ZipBin.pl
##################################################################
BEGIN {
	push @INC, '.';
}
use Restrax;
use strict;
use Cwd;
use vars qw/*dbg *SYSNAME *PROMPT *HOST/;
*dbg      = *Restrax::dbg;
*SYSNAME  = *Restrax::SYSNAME;
*PROMPT   = *Restrax::PROMPT;
*HOST     = *Restrax::HOST;

# -------------------  PROJECT DEFINITIONS (edit to your convenience)------------

# source files/directories
# the script DOES descent directories, so you can define the whole tree
# Note that *.in files are added automatically
my @SOURCES=(
# complete directories
    "3rdparty","config","resources","src","licenses","templates",
# information files
   "*.md", "LICENSE", 
# GUI
    "submodules/simresUI",
# JSDRIV server
    "submodules/jsdriv_server"	
);

my $exclnames = "bin|lib|Java3D|dist|[.]gitignore|[.]gitmodules|tmp[.]txt|config[.]inc"; # excluded names (files or directories)
my $exclext="exe|bin|dcu|lib|dpp|dll|so|res"; # excluded file extensions 		   

# extra files that are missed by source collection:
my @EXTRAS=(
  "resources/setup/crystal.lib","resources/setup/tables/atoms.lib"
);

# executable scripts:
my @EXECS=(
# perl script system for configuration, installation and packaging
    "Restrax.pm", "configure.pl", "fsym", "findJRE.pl", "build.bat"
# batch files useful in win32
  );

# Utils needed to run compiled SIMRES:
my @UTILS=(
# Java 3D files:
    "GUI/j3d-jre",
	# information files
   "*.md", "LICENSE", "licenses"
); 
if ($SYSNAME eq 'win32') {
	push @UTILS,("bin/libpgplot.dll", "bin/jsdrivlib.dll", "lib/pgplot/jsdriv_server.exe",
      "lib/pgplot/grfont.dat", "lib/pgplot/rgb.txt");
} else {
    push @UTILS,("lib/libpgplot.so", "lib/pgplot/pgxwin_server", "lib/pgplot/grfont.dat", 
	  "lib/pgplot/rgb.txt");
};


#-----------------------------------------------------------------------------

# Global declarations
$dbg=0;          # set 1 for debug: no system commands will be executed
$PROMPT="yes";   # set to no if you dont want any user confirmation on file delete
my $WHAT="";   # set to "util" to pack only system dependent files needed to compile and run the SIMRES
my @INFILES=();     # array for *.in files
my @SRCFILES=();    # array with files to install
my $PGMNAME="@PGMNAME@"; # program executable name
my $VERSION="@VERSION@"; # version string
# Get system info for archive filename

# temporary subdirectory for the archive
my $TD="$PGMNAME-$VERSION-src";

# ------------------------------------ PROCEDURES ------------------------------------------
# handle command line parameters
sub CmdParam {
  if ($#ARGV > -1) {
    foreach my $a (@ARGV) {
      if ($a =~ m/[-]+Q\z/) {$PROMPT="no";};
	  if ($a =~ m/[-]+util\z/) {$WHAT="util";};
      if ($a =~ m/[-]+help\z/) {
        print "\n";
        print "Usage:\n";
        print "perl $0 [options]\n";
        print "Options:\n";
        print "  -Q       ... quiet mode: does not prompt for anything \n";
        print "  -util    ... pack only system dependent files needed to compile and run the SIMRES \n";
        print "  -help    ... this help \n";
        print "\n";
        exit;
      };
    };
  };
};

# ------------------------------ MAIN SECTION ----------------------------------

# process command parameters
CmdParam;
if ($WHAT eq "util") {
	$TD="$PGMNAME-$VERSION-utils-$HOST-$SYSNAME";
}

# clean/recreate temporary target directory, $TD
if ($dbg == 0) {
  if ( -d "$TD" ) { RmDirCmd("$TD")};
  mkdir("$TD");
};
my @notfound=();
# collect utilities
if ($WHAT eq "util") {
	my @UTILF = CollectResourcesEx("","","distr",@UTILS);
												  
	# copy sources to $TD
	foreach my $F (@UTILF) {
	  if ((my $res = FileCopyCmd($F,$TD,"0644")) eq "") {
		push @notfound,("$res")
	  };
	};
	open(OUTFILE,">$TD/README_utils") or die "Cannot create $TD/README_utils:\n $!\n";
    printf(OUTFILE "The package $TD contains files, which may be needed to compile and then install/run SIMRES. \n");
	printf(OUTFILE "Copy contents to the SIMRES source directory before compilation.\n");
	close(OUTFILE);
# collect source files
} else {
	# collect all resources defined in $SOURCES list
															   
	@SRCFILES = CollectResourcesEx2("",$exclext,"",$exclnames,@SOURCES);
	# copy sources to $TD
	foreach my $F (@SRCFILES) {
	  if ((my $res = FileCopyCmd($F,$TD,"0644")) eq "") {
		push @notfound,("$res")
	  };
	};
	# copy extras to $TD
	my @EXTRAF = CollectResources("","",@EXTRAS);
	foreach my $F (@EXTRAF) {
	  if ((my $res = FileCopyCmd($F,$TD,"0644")) eq "") {
		push @notfound,("$res")
	  };
	};	
	# copy executable scripts to $TD
	foreach my $F (@EXECS) {
	  if ((my $res = FileCopyCmd($F,$TD,"0755")) eq "") {
		push @notfound,("$res");
	  };
	};
};

# pack the directory
my $ARCH=ZipDirCmd($TD,$TD);

# remove the temporary directory
RmDirCmd($TD);

if ( $ARCH ne "" ) {
  printf("Archive $ARCH has been created.\n");
} else {
  printf("WARNING! Archive could not be created.\n");
};

# report uninstalled files:
if ($#notfound > -1) {
  printf("WARNING! Could not find following files: \n");
  foreach my $f (@notfound) {
    printf("     %s \n",$f);
  };
  die;
};


